<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ccit.dao.UserMapper">
	<!-- User的resultMap,column是给数据库列起的别名,它对应property类的属性 -->
	<resultMap id="result_User_Map" type="com.ccit.dml.User">
		<id column="id" property="id" />
		<result column="LoginName" property="loginName" />
		<result column="PassWord" property="passWord" />
		<result column="lck" property="lck" />
		<result column="UserDate_ID" property="userdateId" />
		<result column="Repayment_ID" property="repaymentId" />
		<result column="Borrowing_ID" property="borrowingId" />
		<result column="Role_ID" property="roleId" />
		<result column="Capital_ID" property="capitalId" />
	</resultMap>

	<!-- assist是查询辅助工具类, ${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
	<sql id="assist">
		<where>
			<foreach collection="require" item="req" separator=" ">
				${req.require}
				<if test="req.value != null">
					#{req.value}
				</if>
				<if test="req.values != null">
					<foreach collection="req.values" item="value" separator=",">
						#{value}
					</foreach>
				</if>
				<if test="req.suffix != null"> ${req.suffix}</if>
			</foreach>
		</where>
	</sql>

	<!-- updateAssist用于更新数据查询辅助工具类,作用assist与一致 -->
	<sql id="updateAssist">
		<where>
			<foreach collection="assist.require" item="req" separator=" ">
				${req.require}
				<if test="req.value != null">
					#{req.value}
				</if>
				<if test="req.values != null">
					<foreach collection="req.values" item="value" separator=",">
						#{value}
					</foreach>
				</if>
				<if test="req.suffix != null"> ${req.suffix}</if>
			</foreach>
		</where>
	</sql>

	<!-- 数据库中表名为:user的列名 -->
	<sql id="user_Column">
		id,LoginName,PassWord,lck,UserDate_ID,Repayment_ID,Borrowing_ID,Role_ID,Capital_ID
	</sql>

	<!--获得类名为:User对应的数据库表的数据总行数 -->
	<select id="getUserRowCount" parameterType="com.common.Assist" resultType="java.lang.Long">
		select count(*) from user
		<if test="require!=null">
			<include refid="assist" />
		</if>
	</select>
	
	<!-- 获得类名为:User对应数据库中表的数据集合 -->
	<select id="selectUser" parameterType="com.common.Assist" resultMap="result_User_Map">
		select
		<if test="distinct !=null">${distinct}</if>
		<choose>
			<when test="resultColumn!=null">${resultColumn}</when>
			<otherwise>
				<include refid="user_Column" />
			</otherwise>
		</choose>
		from user
		<if test="require!=null">
			<include refid="assist" />
		</if>
		<if test="order !=null">${order}</if>
		<choose>
			<when test="startRow !=null and rowSize !=null">LIMIT #{startRow},#{rowSize} </when>
			<when test="rowSize !=null">LIMIT #{rowSize}</when>
		</choose>
	</select>
	
	<!-- 通过User的id获得对应数据库中表的数据对象 -->
	<select id="selectUserById"  parameterType="String" resultMap="result_User_Map"> 
		select 
		<include refid="user_Column" /> 
		from user 
		where id = #{id}
	</select>
	
	<!-- 获得一个User对象,以参数User对象中不为空的属性作为条件进行查询 -->
	<select id="selectUserObjSingle" parameterType="com.ccit.dml.User" resultMap="result_User_Map">
		select
		<include refid="user_Column" />
		from user
		<where>
		<if test="loginName != null"> and LoginName = #{loginName}</if>
		<if test="passWord != null"> and PassWord = #{passWord}</if>
		<if test="lck != null"> and lck = #{lck}</if>
		<if test="userdateId != null"> and UserDate_ID = #{userdateId}</if>
		<if test="repaymentId != null"> and Repayment_ID = #{repaymentId}</if>
		<if test="borrowingId != null"> and Borrowing_ID = #{borrowingId}</if>
		<if test="roleId != null"> and Role_ID = #{roleId}</if>
		<if test="capitalId != null"> and Capital_ID = #{capitalId}</if>
		<if test="id != null"> and id = #{id} </if>
		</where>
		LIMIT 1
	</select>
	
	<!-- 获得User对象,以参数User对象中不为空的属性作为条件进行查询 -->
	<select id="selectUserByObj" parameterType="com.ccit.dml.User" resultMap="result_User_Map">
		select
		<include refid="user_Column" />
		from user
		<where>
		<if test="loginName != null"> and LoginName = #{loginName}</if>
		<if test="passWord != null"> and PassWord = #{passWord}</if>
		<if test="lck != null"> and lck = #{lck}</if>
		<if test="userdateId != null"> and UserDate_ID = #{userdateId}</if>
		<if test="repaymentId != null"> and Repayment_ID = #{repaymentId}</if>
		<if test="borrowingId != null"> and Borrowing_ID = #{borrowingId}</if>
		<if test="roleId != null"> and Role_ID = #{roleId}</if>
		<if test="capitalId != null"> and Capital_ID = #{capitalId}</if>
		<if test="id != null"> and id = #{id} </if>
		</where>
	</select>

	<!-- 将User插入到对应数据库的表中,包括属性值为null的数据 -->
	<insert id="insertUser" parameterType="com.ccit.dml.User">
		insert into 
		user (id,LoginName,PassWord,lck,UserDate_ID,Repayment_ID,Borrowing_ID,Role_ID,Capital_ID) 
		values(#{id},#{loginName},#{passWord},#{lck},#{userdateId},#{repaymentId},#{borrowingId},#{roleId},#{capitalId})
	</insert>

	<!-- 将User中属性值不为null的数据,插入到对应数据库的表中 -->
	<insert id="insertNotNullUser" parameterType="com.ccit.dml.User">
		insert into user
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">id,</if>
			<if test="loginName != null">LoginName,</if>
			<if test="passWord != null">PassWord,</if>
			<if test="lck != null">lck,</if>
			<if test="userdateId != null">UserDate_ID,</if>
			<if test="repaymentId != null">Repayment_ID,</if>
			<if test="borrowingId != null">Borrowing_ID,</if>
			<if test="roleId != null">Role_ID,</if>
			<if test="capitalId != null">Capital_ID,</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">#{id},</if>
			<if test="loginName != null">#{loginName},</if>
			<if test="passWord != null">#{passWord},</if>
			<if test="lck != null">#{lck},</if>
			<if test="userdateId != null">#{userdateId},</if>
			<if test="repaymentId != null">#{repaymentId},</if>
			<if test="borrowingId != null">#{borrowingId},</if>
			<if test="roleId != null">#{roleId},</if>
			<if test="capitalId != null">#{capitalId},</if>
		</trim>
	</insert>

	<!-- 将User批量插入到对应数据库的表中 -->
	<insert id="insertUserByBatch" parameterType="ArrayList">
		insert into user(id,LoginName,PassWord,lck,UserDate_ID,Repayment_ID,Borrowing_ID,Role_ID,Capital_ID) values
		<foreach collection="list" item="item" index="index"
			separator=",">
			(#{id},#{loginName},#{passWord},#{lck},#{userdateId},#{repaymentId},#{borrowingId},#{roleId},#{capitalId})
		</foreach>
	</insert>
	
	<!-- 通过User的id将数据库表中对应的数据删除 -->
	<delete id="deleteUserById" parameterType="String">
		delete from user
		where  id  =  #{id}
	</delete>

	<!-- 通过辅助工具Assist中的条件将User对应的数据库表的数据删除 -->
	<delete id="deleteUserByAssist" parameterType="com.common.Assist">
		delete from user
		<if test="require!=null">
			<include refid="assist" />
		</if>
	</delete>
	
	<!-- 通过User的id将User的数据更新到数据库中对应的表,包括值null的数据 -->
	<update id="updateUserById" parameterType="com.ccit.dml.User"> 
		update user set
		<set>
			LoginName = #{loginName} , 
			PassWord = #{passWord} , 
			lck = #{lck} , 
			UserDate_ID = #{userdateId} , 
			Repayment_ID = #{repaymentId} , 
			Borrowing_ID = #{borrowingId} , 
			Role_ID = #{roleId} , 
			Capital_ID = #{capitalId} , 
		</set>
		where id = #{id}
	</update>
	
	<!-- 通过User的id将User中属性值不为null的数据更新到数据库对应的表中 -->
	<update id="updateNotNullUserById" parameterType="com.ccit.dml.User">
		update user
		<set>
					<if test="loginName != null">LoginName = #{loginName},</if>
					<if test="passWord != null">PassWord = #{passWord},</if>
					<if test="lck != null">lck = #{lck},</if>
					<if test="userdateId != null">UserDate_ID = #{userdateId},</if>
					<if test="repaymentId != null">Repayment_ID = #{repaymentId},</if>
					<if test="borrowingId != null">Borrowing_ID = #{borrowingId},</if>
					<if test="roleId != null">Role_ID = #{roleId},</if>
					<if test="capitalId != null">Capital_ID = #{capitalId},</if>
		</set>
		where id = #{id}
	</update>
	
	<!-- 通过辅助工具Assist中的条件将User中的数据更新到数据库对应的表中,包括值为null的数据 -->
	<update id="updateUser" parameterType="map">
		update user
		<set>
			id = #{enti.id},
			LoginName = #{enti.loginName},
			PassWord = #{enti.passWord},
			lck = #{enti.lck},
			UserDate_ID = #{enti.userdateId},
			Repayment_ID = #{enti.repaymentId},
			Borrowing_ID = #{enti.borrowingId},
			Role_ID = #{enti.roleId},
			Capital_ID = #{enti.capitalId},
		</set>
		<if test="assist.require!=null">
			<include refid="updateAssist" />
		</if>
	</update>

	<!-- 通过辅助工具Assist中的条件将User中属性值不为null的数据更新到数据库对应的表中 -->
	<update id="updateNotNullUser" parameterType="map">
		update user
		<set>
			<if test="enti.id != null">id = #{enti.id},</if>
			<if test="enti.loginName != null">LoginName = #{enti.loginName},</if>
			<if test="enti.passWord != null">PassWord = #{enti.passWord},</if>
			<if test="enti.lck != null">lck = #{enti.lck},</if>
			<if test="enti.userdateId != null">UserDate_ID = #{enti.userdateId},</if>
			<if test="enti.repaymentId != null">Repayment_ID = #{enti.repaymentId},</if>
			<if test="enti.borrowingId != null">Borrowing_ID = #{enti.borrowingId},</if>
			<if test="enti.roleId != null">Role_ID = #{enti.roleId},</if>
			<if test="enti.capitalId != null">Capital_ID = #{enti.capitalId},</if>
		</set>
		<if test="assist.require!=null">
			<include refid="updateAssist" />
		</if>
	</update>
</mapper>